/**
* Docker Engine API
* The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
*
* The version of the OpenAPI document: 1.41
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package br.com.devsrsouza.kotlin.docker.models

import br.com.devsrsouza.kotlin.docker.models.SystemVersionComponents
import br.com.devsrsouza.kotlin.docker.models.SystemVersionPlatform

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * Response of Engine API: GET \"/version\" 
 * @param platform 
 * @param components Information about system components 
 * @param version The version of the daemon
 * @param apiVersion The default (and highest) API version that is supported by the daemon 
 * @param minAPIVersion The minimum API version that is supported by the daemon 
 * @param gitCommit The Git commit of the source code that was used to build the daemon 
 * @param goVersion The version Go used to compile the daemon, and the version of the Go runtime in use. 
 * @param os The operating system that the daemon is running on (\"linux\" or \"windows\") 
 * @param arch The architecture that the daemon is running on 
 * @param kernelVersion The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty. 
 * @param experimental Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. 
 * @param buildTime The date and time that the daemon was compiled. 
 */
@Serializable
data class SystemVersion (
    @SerialName(value = "Platform") val platform: SystemVersionPlatform? = null,
    /* Information about system components  */
    @SerialName(value = "Components") val components: kotlin.collections.List<SystemVersionComponents>? = null,
    /* The version of the daemon */
    @SerialName(value = "Version") val version: kotlin.String? = null,
    /* The default (and highest) API version that is supported by the daemon  */
    @SerialName(value = "ApiVersion") val apiVersion: kotlin.String? = null,
    /* The minimum API version that is supported by the daemon  */
    @SerialName(value = "MinAPIVersion") val minAPIVersion: kotlin.String? = null,
    /* The Git commit of the source code that was used to build the daemon  */
    @SerialName(value = "GitCommit") val gitCommit: kotlin.String? = null,
    /* The version Go used to compile the daemon, and the version of the Go runtime in use.  */
    @SerialName(value = "GoVersion") val goVersion: kotlin.String? = null,
    /* The operating system that the daemon is running on (\"linux\" or \"windows\")  */
    @SerialName(value = "Os") val os: kotlin.String? = null,
    /* The architecture that the daemon is running on  */
    @SerialName(value = "Arch") val arch: kotlin.String? = null,
    /* The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty.  */
    @SerialName(value = "KernelVersion") val kernelVersion: kotlin.String? = null,
    /* Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false.  */
    @SerialName(value = "Experimental") val experimental: kotlin.Boolean? = null,
    /* The date and time that the daemon was compiled.  */
    @SerialName(value = "BuildTime") val buildTime: kotlin.String? = null
)

